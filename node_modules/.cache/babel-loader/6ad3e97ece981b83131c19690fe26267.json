{"ast":null,"code":"import _regeneratorRuntime from\"/Users/kordellschrock/Documents/Github/deployment1Frontend/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/kordellschrock/Documents/Github/deployment1Frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/Users/kordellschrock/Documents/Github/deployment1Frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{Line,Bar}from'react-chartjs-2';import apiClient from'../../services/apiClient';import{useEffect,useState}from\"react\";import{jsx as _jsx}from\"react/jsx-runtime\";export default function CustomerLineGraph(_ref){var range=_ref.range,dateRange=_ref.dateRange,start=_ref.start;var _useState=useState([]),_useState2=_slicedToArray(_useState,2),data=_useState2[0],setData=_useState2[1];var days={1:'Mon',2:'Tues',3:'Wed',4:'Thurs',5:'Fri',6:'Sat',7:'Sun'};var months={\"Jan\":'01',\"Feb\":'02',\"Mar\":'03',\"Apr\":'04',\"May\":'05',\"Jun\":'06',\"Jul\":'07',\"Aug\":'08',\"Sep\":'09',\"Oct\":'10',\"Nov\":'11',\"Dec\":'12'};useEffect(function(){Date.prototype.addDays=function(days){var date=new Date(this.valueOf());date.setDate(date.getDate()+days);return date;};function getDates(startDate,stopDate){var dateArray=[];var currentDate=startDate;while(currentDate<=stopDate){var date=new Date(currentDate);date=date.toString();var dateFormat=date.slice(11,15)+'-'+months[date.slice(4,7)]+'-'+date.slice(8,10);dateArray.push(dateFormat);currentDate=currentDate.addDays(1);}return dateArray;}var dateArray=getDates(dateRange[0].startDate,dateRange[0].endDate);var handleOnSubmit=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(startDate){var _yield$apiClient$getW,data,error;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return apiClient.getWeeklyCustomers({start_date:startDate});case 2:_yield$apiClient$getW=_context.sent;data=_yield$apiClient$getW.data;error=_yield$apiClient$getW.error;return _context.abrupt(\"return\",data);case 6:case\"end\":return _context.stop();}}},_callee);}));return function handleOnSubmit(_x){return _ref2.apply(this,arguments);};}();var forLoop=/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(){return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.t0=setData;_context2.next=3;return Promise.all(dateArray.map(function(date){return handleOnSubmit(date);}));case 3:_context2.t1=_context2.sent;(0,_context2.t0)(_context2.t1);case 5:case\"end\":return _context2.stop();}}},_callee2);}));return function forLoop(){return _ref3.apply(this,arguments);};}();forLoop();},[dateRange]);var more=[];for(var i=0;i<data.length;i++){more.push(data[i]['customers']);}var labels=[];if(range>7){start=start.getUTCDate();for(var _i=0;_i<range;_i++){labels.push(start);start+=1;}}else{start=start.getUTCDay();for(var _i2=0;_i2<range;_i2++){labels.push(days[start]);start+=1;if(start>7){start=1;}}}var state={labels:labels,datasets:[{label:'Customers',backgroundColor:'rgba(75,192,192,1)',lineTension:0.5,borderColor:'rgba(0,0,0,1)',borderWidth:2,data:more}]};return/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsx(Bar,{data:state,options:{title:{display:true,text:'Daily Sales',fontSize:20},legend:{display:true,position:'right'}}})});}","map":{"version":3,"sources":["/Users/kordellschrock/Documents/Github/deployment1Frontend/src/components/CustomerLineGraph/CustomerLineGraph.js"],"names":["Line","Bar","apiClient","useEffect","useState","CustomerLineGraph","range","dateRange","start","data","setData","days","months","Date","prototype","addDays","date","valueOf","setDate","getDate","getDates","startDate","stopDate","dateArray","currentDate","toString","dateFormat","slice","push","endDate","handleOnSubmit","getWeeklyCustomers","start_date","error","forLoop","Promise","all","map","more","i","length","labels","getUTCDate","getUTCDay","state","datasets","label","backgroundColor","lineTension","borderColor","borderWidth","title","display","text","fontSize","legend","position"],"mappings":"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","sourcesContent":["import { Line, Bar } from 'react-chartjs-2';\nimport apiClient from '../../services/apiClient';\nimport { useEffect, useState } from \"react\";\n\nexport default function CustomerLineGraph({ range, dateRange, start }) {\n  const [data, setData] = useState([])\n  const days = {\n    1: 'Mon',\n    2: 'Tues',\n    3: 'Wed',\n    4: 'Thurs',\n    5: 'Fri',\n    6: 'Sat',\n    7: 'Sun'\n  }\n\n  const months = {\n    \"Jan\": '01',\n    \"Feb\": '02',\n    \"Mar\": '03',\n    \"Apr\": '04',\n    \"May\": '05',\n    \"Jun\": '06',\n    \"Jul\": '07',\n    \"Aug\": '08',\n    \"Sep\": '09',\n    \"Oct\": '10',\n    \"Nov\": '11',\n    \"Dec\": '12'\n  }\n\n\n  useEffect(() => {\n    Date.prototype.addDays = function (days) {\n      var date = new Date(this.valueOf());\n      date.setDate(date.getDate() + days);\n      return date;\n    }\n\n    function getDates(startDate, stopDate) {\n      var dateArray = [];\n      var currentDate = startDate;\n      while (currentDate <= stopDate) {\n        let date = new Date(currentDate)\n        date = date.toString()\n        let dateFormat = date.slice(11, 15) + '-' + months[date.slice(4, 7)] + '-' + date.slice(8, 10)\n        dateArray.push(dateFormat);\n        currentDate = currentDate.addDays(1);\n      }\n      return dateArray;\n    }\n\n    const dateArray = getDates(dateRange[0].startDate, dateRange[0].endDate)\n\n    const handleOnSubmit = async (startDate) => {\n\n      const { data, error } = await apiClient.getWeeklyCustomers(\n        {\n          start_date: startDate\n        })\n      return data\n    }\n    const forLoop = async () => {\n      setData(await Promise.all(dateArray.map((date) => handleOnSubmit(date))))\n    }\n    forLoop()\n\n  }, [dateRange])\n\n  let more = []\n  for (let i =0; i<data.length;i++){\n    more.push(data[i]['customers'])\n  }\n\n  let labels =[]\n  if (range>7){\n    start = start.getUTCDate()\n    for(let i =0;i<range;i++){\n      labels.push(start)\n      start+=1\n    }\n  }else{\n    start = start.getUTCDay()\n    for(let i =0;i<range;i++){\n      labels.push(days[start])\n      start+=1\n      if (start>7){\n        start =1\n      }\n    }\n  }\n\n  const state = {\n    labels: (labels),\n    datasets: [\n      {\n        label: 'Customers',\n        backgroundColor: 'rgba(75,192,192,1)',\n        lineTension: 0.5,\n        borderColor: 'rgba(0,0,0,1)',\n        borderWidth: 2,\n        data: more\n      }\n    ]\n  }\n  return (\n    <div>\n      <Bar\n        data={state}\n        options={{\n          title: {\n            display: true,\n            text: 'Daily Sales',\n            fontSize: 20\n          },\n          legend: {\n            display: true,\n            position: 'right'\n          }\n        }}\n      />\n    </div>\n  );\n}"]},"metadata":{},"sourceType":"module"}