{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport apiClient from '../services/apiClient';\nexport default function useAppState() {\n  _s();\n\n  const [error, setError] = useState(null);\n  const [appState, setAppState] = useState({\n    user: null,\n    isAuthenticated: false,\n    nutritions: [],\n    sleep: [],\n    exercises: [],\n    token: \"\"\n  });\n  useEffect(() => {\n    const fetchUser = async () => {\n      const {\n        data,\n        error\n      } = await apiClient.fetchUserFromToken();\n\n      if (data) {\n        setAppState(a => ({ ...a,\n          user: data.user,\n          isAuthenticated: true\n        }));\n      }\n\n      if (error) setError(error);\n    };\n\n    const token = localStorage.getItem(\"fitness_app_token\");\n\n    if (token) {\n      apiClient.setToken(token);\n      fetchUser();\n    }\n  }, []);\n  useEffect(() => {\n    const fetchExercise = async () => {\n      const {\n        data,\n        error\n      } = await apiClient.listUserExercise();\n\n      if (data) {\n        setAppState(a => ({ ...a,\n          exercises: data.exercises\n        }));\n      }\n\n      if (error) setError(error);\n    };\n\n    if (appState.isAuthenticated) {\n      fetchExercise();\n    }\n  }, [appState.isAuthenticated]);\n  useEffect(() => {\n    const fetchNutritions = async () => {\n      const {\n        data,\n        error\n      } = await apiClient.listUserNutrition();\n\n      if (data) {\n        setAppState(a => ({ ...a,\n          nutritions: data.nutritions\n        })); //   setExercise(data.exercises)\n      }\n\n      if (error) setError(error);\n    };\n\n    if (appState.isAuthenticated) {\n      fetchNutritions();\n    }\n  }, [appState.isAuthenticated]);\n  useEffect(() => {\n    const fetchSleeps = async () => {\n      const {\n        data,\n        error\n      } = await apiClient.listUserSleep();\n\n      if (data) {\n        setAppState(a => ({ ...a,\n          sleep: data.sleeps\n        })); //   setExercise(data.exercises)\n      }\n\n      if (error) setError(error);\n    };\n\n    if (appState.isAuthenticated) {\n      fetchSleeps();\n    }\n  }, [appState.isAuthenticated]);\n  return {\n    appState,\n    error,\n    setAppState,\n    setError\n  };\n}\n\n_s(useAppState, \"KsTrR1nZfdsK1pf/REqwyQNqXxs=\");","map":{"version":3,"sources":["/Users/kordellschrock/Documents/Github/ecommerce/frontend/src/hooks/useAppState.js"],"names":["useEffect","useState","apiClient","useAppState","error","setError","appState","setAppState","user","isAuthenticated","nutritions","sleep","exercises","token","fetchUser","data","fetchUserFromToken","a","localStorage","getItem","setToken","fetchExercise","listUserExercise","fetchNutritions","listUserNutrition","fetchSleeps","listUserSleep","sleeps"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,OAAOC,SAAP,MAAsB,uBAAtB;AAEA,eAAe,SAASC,WAAT,GAAuB;AAAA;;AACpC,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBJ,QAAQ,CAAC,IAAD,CAAlC;AACA,QAAM,CAACK,QAAD,EAAWC,WAAX,IAA0BN,QAAQ,CAAC;AACvCO,IAAAA,IAAI,EAAE,IADiC;AAEvCC,IAAAA,eAAe,EAAE,KAFsB;AAGvCC,IAAAA,UAAU,EAAE,EAH2B;AAIvCC,IAAAA,KAAK,EAAE,EAJgC;AAKvCC,IAAAA,SAAS,EAAE,EAL4B;AAMvCC,IAAAA,KAAK,EAAE;AANgC,GAAD,CAAxC;AASAb,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMc,SAAS,GAAG,YAAY;AAC5B,YAAM;AAAEC,QAAAA,IAAF;AAAQX,QAAAA;AAAR,UAAkB,MAAMF,SAAS,CAACc,kBAAV,EAA9B;;AACA,UAAID,IAAJ,EAAU;AACRR,QAAAA,WAAW,CAAEU,CAAD,KACV,EACE,GAAGA,CADL;AACQT,UAAAA,IAAI,EAAEO,IAAI,CAACP,IADnB;AACyBC,UAAAA,eAAe,EAAE;AAD1C,SADU,CAAD,CAAX;AAKD;;AACD,UAAIL,KAAJ,EAAWC,QAAQ,CAACD,KAAD,CAAR;AACZ,KAVD;;AAYA,UAAMS,KAAK,GAAGK,YAAY,CAACC,OAAb,CAAqB,mBAArB,CAAd;;AACA,QAAIN,KAAJ,EAAW;AACTX,MAAAA,SAAS,CAACkB,QAAV,CAAmBP,KAAnB;AACAC,MAAAA,SAAS;AACV;AACF,GAlBQ,EAkBN,EAlBM,CAAT;AAoBAd,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMqB,aAAa,GAAG,YAAY;AAChC,YAAM;AAAEN,QAAAA,IAAF;AAAQX,QAAAA;AAAR,UAAkB,MAAMF,SAAS,CAACoB,gBAAV,EAA9B;;AACA,UAAIP,IAAJ,EAAU;AACRR,QAAAA,WAAW,CAAEU,CAAD,KACV,EACE,GAAGA,CADL;AACQL,UAAAA,SAAS,EAAEG,IAAI,CAACH;AADxB,SADU,CAAD,CAAX;AAKD;;AACD,UAAIR,KAAJ,EAAWC,QAAQ,CAACD,KAAD,CAAR;AACZ,KAVD;;AAWA,QAAIE,QAAQ,CAACG,eAAb,EAA6B;AAC3BY,MAAAA,aAAa;AACd;AAEF,GAhBQ,EAgBN,CAACf,QAAQ,CAACG,eAAV,CAhBM,CAAT;AAkBAT,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMuB,eAAe,GAAG,YAAY;AAClC,YAAM;AAAER,QAAAA,IAAF;AAAQX,QAAAA;AAAR,UAAkB,MAAMF,SAAS,CAACsB,iBAAV,EAA9B;;AACA,UAAIT,IAAJ,EAAU;AACRR,QAAAA,WAAW,CAAEU,CAAD,KACV,EACE,GAAGA,CADL;AACQP,UAAAA,UAAU,EAAEK,IAAI,CAACL;AADzB,SADU,CAAD,CAAX,CADQ,CAMR;AACD;;AACD,UAAIN,KAAJ,EAAWC,QAAQ,CAACD,KAAD,CAAR;AACZ,KAXD;;AAYA,QAAIE,QAAQ,CAACG,eAAb,EAA6B;AAC3Bc,MAAAA,eAAe;AAChB;AAEF,GAjBQ,EAiBN,CAACjB,QAAQ,CAACG,eAAV,CAjBM,CAAT;AAmBAT,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMyB,WAAW,GAAG,YAAY;AAC9B,YAAM;AAAEV,QAAAA,IAAF;AAAQX,QAAAA;AAAR,UAAkB,MAAMF,SAAS,CAACwB,aAAV,EAA9B;;AACA,UAAIX,IAAJ,EAAU;AACRR,QAAAA,WAAW,CAAEU,CAAD,KACV,EACE,GAAGA,CADL;AACQN,UAAAA,KAAK,EAAEI,IAAI,CAACY;AADpB,SADU,CAAD,CAAX,CADQ,CAMR;AACD;;AACD,UAAIvB,KAAJ,EAAWC,QAAQ,CAACD,KAAD,CAAR;AACZ,KAXD;;AAYA,QAAIE,QAAQ,CAACG,eAAb,EAA6B;AAC3BgB,MAAAA,WAAW;AACZ;AAEF,GAjBQ,EAiBN,CAACnB,QAAQ,CAACG,eAAV,CAjBM,CAAT;AAmBA,SAAO;AAAEH,IAAAA,QAAF;AAAYF,IAAAA,KAAZ;AAAmBG,IAAAA,WAAnB;AAAgCF,IAAAA;AAAhC,GAAP;AACD;;GAxFuBF,W","sourcesContent":["import { useEffect, useState } from \"react\";\nimport apiClient from '../services/apiClient';\n\nexport default function useAppState() {\n  const [error, setError] = useState(null)\n  const [appState, setAppState] = useState({\n    user: null,\n    isAuthenticated: false,\n    nutritions: [],\n    sleep: [],\n    exercises: [],\n    token: \"\"\n  })\n\n  useEffect(() => {\n    const fetchUser = async () => {\n      const { data, error } = await apiClient.fetchUserFromToken()\n      if (data) {\n        setAppState((a) => (\n          {\n            ...a, user: data.user, isAuthenticated: true\n          }\n        ))\n      }\n      if (error) setError(error)\n    }\n\n    const token = localStorage.getItem(\"fitness_app_token\")\n    if (token) {\n      apiClient.setToken(token)\n      fetchUser()\n    }\n  }, [])\n\n  useEffect(() => {\n    const fetchExercise = async () => {\n      const { data, error } = await apiClient.listUserExercise()\n      if (data) {\n        setAppState((a) => (\n          {\n            ...a, exercises: data.exercises\n          }\n        ))\n      }\n      if (error) setError(error)\n    }\n    if (appState.isAuthenticated){\n      fetchExercise()\n    }\n\n  }, [appState.isAuthenticated])\n  \n  useEffect(() => {\n    const fetchNutritions = async () => {\n      const { data, error } = await apiClient.listUserNutrition()\n      if (data) {\n        setAppState((a) => (\n          {\n            ...a, nutritions: data.nutritions\n          }\n        ))\n        //   setExercise(data.exercises)\n      }\n      if (error) setError(error)\n    }\n    if (appState.isAuthenticated){\n      fetchNutritions()\n    }\n\n  }, [appState.isAuthenticated])\n\n  useEffect(() => {\n    const fetchSleeps = async () => {\n      const { data, error } = await apiClient.listUserSleep()\n      if (data) {\n        setAppState((a) => (\n          {\n            ...a, sleep: data.sleeps\n          }\n        ))\n        //   setExercise(data.exercises)\n      }\n      if (error) setError(error)\n    }\n    if (appState.isAuthenticated){\n      fetchSleeps()\n    }\n\n  }, [appState.isAuthenticated])\n\n  return { appState, error, setAppState, setError }\n}"]},"metadata":{},"sourceType":"module"}