{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { set } from \"date-fns\";\nimport { useEffect, useState } from \"react\";\nimport apiClient from '../services/apiClient';\nexport default function useAppState() {\n  _s();\n\n  const [error, setError] = useState(null);\n  const [appState, setAppState] = useState({\n    first_name: \"\",\n    last_name: \"\",\n    email: \"\",\n    isAuthenticated: false,\n    cart: [],\n    review: [],\n    favorites: [],\n    rewards: 0,\n    address: ''\n  });\n  const [vendorState, setvendorState] = useState({\n    currentOrders: [],\n    pastOrders: []\n  });\n  useEffect(() => {\n    const fetchUser = async () => {\n      const {\n        data,\n        error\n      } = await apiClient.fetchUserFromToken();\n\n      if (data) {\n        console.log(data.publicUser);\n        setAppState(a => ({ ...a,\n          first_name: data.publicUser.first_name,\n          last_name: data.publicUser.last_name,\n          email: data.publicUser.email,\n          rewards: data.publicUser.rewards,\n          isAuthenticated: true,\n          address: data.publicUser.address\n        }));\n      }\n\n      if (error) setError(error);\n    };\n\n    const token = localStorage.getItem(\"pizza_shop_token\");\n\n    if (token) {\n      apiClient.setToken(token);\n      fetchUser();\n    }\n  }, []);\n  useEffect(() => {\n    const fetchOrders = async () => {\n      const {\n        data,\n        error\n      } = await apiClient.getCurrentOrders();\n\n      if (data) {\n        setvendorState(a => ({ ...a,\n          currentOrders: data.orders\n        }));\n      }\n\n      if (error) setError(error);\n    };\n\n    const fetchPastOrders = async () => {\n      const {\n        data,\n        error\n      } = await apiClient.getPastOrders();\n\n      if (data) {\n        setvendorState(a => ({ ...a,\n          pastOrders: data.orders\n        }));\n      }\n\n      if (error) setError(error);\n    };\n\n    fetchOrders();\n    fetchPastOrders();\n  }, []); // useEffect(() => {\n  //   const fetchCart = async () => {\n  //     const { data, error } = await apiClient.listCart()\n  //     if (data) {\n  //       setAppState((a) => (\n  //         {\n  //           ...a, cart: data.cart\n  //         }\n  //       ))\n  //     }\n  //     if (error) setError(error)\n  //   }\n  //   if (appState.isAuthenticated){\n  //     fetchCart()\n  //   }\n  // }, [appState.isAuthenticated])\n  // useEffect(() => {\n  //   const fetchRewards = async () => {\n  //     const { data, error } = await apiClient.listRewards()\n  //     if (data) {\n  //       setAppState((a) => (\n  //         {\n  //           ...a, rewards: data.rewards\n  //         }\n  //       ))\n  //       //   setExercise(data.exercises)\n  //     }\n  //     if (error) setError(error)\n  //   }\n  //   if (appState.isAuthenticated){\n  //     fetchRewards()\n  //   }\n  // }, [appState.isAuthenticated])\n\n  return {\n    appState,\n    error,\n    setAppState,\n    setError,\n    vendorState,\n    setvendorState\n  };\n}\n\n_s(useAppState, \"FMmBC4bsyB1hj8b0cm+DcvXyzpE=\");","map":{"version":3,"sources":["/Users/kordellschrock/Documents/Github/ecommerce/frontend/src/hooks/useAppState.js"],"names":["set","useEffect","useState","apiClient","useAppState","error","setError","appState","setAppState","first_name","last_name","email","isAuthenticated","cart","review","favorites","rewards","address","vendorState","setvendorState","currentOrders","pastOrders","fetchUser","data","fetchUserFromToken","console","log","publicUser","a","token","localStorage","getItem","setToken","fetchOrders","getCurrentOrders","orders","fetchPastOrders","getPastOrders"],"mappings":"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","sourcesContent":["import { set } from \"date-fns\";\nimport { useEffect, useState } from \"react\";\nimport apiClient from '../services/apiClient';\n\nexport default function useAppState() {\n  const [error, setError] = useState(null)\n  const [appState, setAppState] = useState({\n    first_name: \"\",\n    last_name:\"\",\n    email:\"\",\n    isAuthenticated: false,\n    cart: [],\n    review:[],\n    favorites:[],\n    rewards: 0,\n    address:''\n  })\n  \n\n  const [vendorState, setvendorState] = useState({\n    currentOrders: [],\n    pastOrders : []\n  })\n\n  useEffect(() => {\n    const fetchUser = async () => {\n      const { data, error } = await apiClient.fetchUserFromToken()\n      if (data) {\n        console.log(data.publicUser)\n        setAppState((a) => (\n          {\n            ...a, \n            first_name: data.publicUser.first_name, \n            last_name:data.publicUser.last_name,\n            email:data.publicUser.email,\n            rewards:data.publicUser.rewards,\n            isAuthenticated: true,\n            address:data.publicUser.address\n          }\n        ))\n      }\n      if (error) setError(error)\n    }\n\n    const token = localStorage.getItem(\"pizza_shop_token\")\n    if (token) {\n      apiClient.setToken(token)\n      fetchUser()\n    }\n  }, [])\n\n  useEffect(() => {\n    const fetchOrders = async () => {\n      const { data, error } = await apiClient.getCurrentOrders()\n      if (data) {\n        setvendorState((a) => (\n          {\n            ...a, currentOrders: data.orders\n          }\n        ))\n      }\n      if (error) setError(error)\n    }\n    const fetchPastOrders = async () => {\n      const { data, error } = await apiClient.getPastOrders()\n      if (data) {\n        setvendorState((a) => (\n          {\n            ...a, pastOrders: data.orders\n          }\n        ))\n      }\n      if (error) setError(error)\n    }\n    fetchOrders()\n    fetchPastOrders()\n  }, [])\n\n  // useEffect(() => {\n  //   const fetchCart = async () => {\n  //     const { data, error } = await apiClient.listCart()\n  //     if (data) {\n  //       setAppState((a) => (\n  //         {\n  //           ...a, cart: data.cart\n  //         }\n  //       ))\n  //     }\n  //     if (error) setError(error)\n  //   }\n  //   if (appState.isAuthenticated){\n  //     fetchCart()\n  //   }\n\n  // }, [appState.isAuthenticated])\n  \n  // useEffect(() => {\n  //   const fetchRewards = async () => {\n  //     const { data, error } = await apiClient.listRewards()\n  //     if (data) {\n  //       setAppState((a) => (\n  //         {\n  //           ...a, rewards: data.rewards\n  //         }\n  //       ))\n  //       //   setExercise(data.exercises)\n  //     }\n  //     if (error) setError(error)\n  //   }\n  //   if (appState.isAuthenticated){\n  //     fetchRewards()\n  //   }\n\n  // }, [appState.isAuthenticated])\n\n  return { appState, error, setAppState, setError, vendorState, setvendorState }\n}"]},"metadata":{},"sourceType":"module"}