{"ast":null,"code":"var _jsxFileName = \"/Users/kordellschrock/Documents/Github/ecommerce/frontend/src/components/Cart/Cart.js\",\n    _s = $RefreshSig$();\n\nimport { useAppStateContext } from '../../contexts/appStateContext';\nimport { Container, Button, Typography, Card, CardContent, CardMedia, Grid } from '@material-ui/core';\nimport apiClient from '../../services/apiClient';\nimport { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport CartCard from '../CartCard/CartCard';\nimport NavBar from '../NavBar/NavBar';\nimport { useNavigate } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Cart() {\n  _s();\n\n  const {\n    appState,\n    setAppState,\n    vendorState,\n    setvendorState\n  } = useAppStateContext();\n  const [isCartFilled, setCart] = useState(false);\n  const navigate = useNavigate(); // if (appState.cart.length !==0){\n  //     setCart(true)\n  // }\n\n  const emptyCart = () => {\n    setAppState(a => ({ ...a,\n      cart: [],\n      review: []\n    }));\n  }; // useEffect (() =>{\n  //     const updateCart = () =>{\n  //         let newCart = []\n  //         console.log(appState.review)\n  //         for (let i = 0; i < appState.review.length; i++) {\n  //             for (let i = 0; i < appState.review[i].quantity; i++){\n  //                 newCart.push(appState.review[i].name)\n  //             }\n  //         }\n  //         console.log(newCart)\n  //         return newCart\n  //     }\n  //     const newCart = updateCart()\n  //     setAppState((a) => ({\n  //         ...a,\n  //         cart:newCart\n  //     }))\n  // },[appState.review.length])\n\n\n  const formatCart = () => {\n    const obj = {};\n\n    for (let i = 0; i < appState.cart.length; i++) {\n      if (appState.cart[i] in obj) {\n        obj[appState.cart[i]] += 1;\n      } else {\n        obj[appState.cart[i]] = 1;\n      }\n    }\n\n    return obj;\n  }; // console.log(prices)\n\n\n  const obj = formatCart();\n  const items = [];\n\n  for (const [key, value] of Object.entries(obj)) {\n    items.push({\n      name: key,\n      quantity: value\n    });\n  }\n\n  const cart = [];\n\n  for (const [key, value] of Object.entries(obj)) {\n    let obj = {};\n    obj[key] = value;\n    cart.push(obj);\n  }\n\n  const createOrder = async () => {\n    // console.log(cart)\n    const {\n      data,\n      error\n    } = await apiClient.createOrder({\n      \"cart\": {\n        address: \"123 Street\",\n        products: cart\n      }\n    });\n    console.log(vendorState.currentOrders);\n    setvendorState(oldState => ({\n      currentOrders: [...oldState.currentOrders, data]\n    }));\n    emptyCart(); // if (error){\n    //   setErrors((e) => ({ ...e, form:error}))\n    // }\n  }; // console.log(items)\n  // console.log(appState.cart1)\n\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(NavBar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        children: \"Your Cart\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: () => {\n          navigate('/menu');\n        },\n        children: \"Add more items\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      children: items.length === 0 ? \"Cart is empty\" : items.map((item, idx) => /*#__PURE__*/_jsxDEV(CartCard, {\n        product: item\n      }, idx, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      onClick: createOrder,\n      children: \"Place Order\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      onClick: emptyCart,\n      children: \"Clear Cart\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      onClick: () => {\n        navigate('/checkout');\n      },\n      children: \"Checkout Order\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Cart, \"As690ri9rV3n+NvRABz5dlZe5j0=\", false, function () {\n  return [useAppStateContext, useNavigate];\n});\n\n_c = Cart;\n\nvar _c;\n\n$RefreshReg$(_c, \"Cart\");","map":{"version":3,"sources":["/Users/kordellschrock/Documents/Github/ecommerce/frontend/src/components/Cart/Cart.js"],"names":["useAppStateContext","Container","Button","Typography","Card","CardContent","CardMedia","Grid","apiClient","useState","useEffect","axios","CartCard","NavBar","useNavigate","Cart","appState","setAppState","vendorState","setvendorState","isCartFilled","setCart","navigate","emptyCart","a","cart","review","formatCart","obj","i","length","items","key","value","Object","entries","push","name","quantity","createOrder","data","error","address","products","console","log","currentOrders","oldState","map","item","idx"],"mappings":"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","sourcesContent":["import { useAppStateContext } from '../../contexts/appStateContext';\nimport { Container, Button, Typography, Card, CardContent, CardMedia, Grid } from '@material-ui/core';\nimport apiClient from '../../services/apiClient';\nimport { useState, useEffect } from \"react\"\nimport axios from \"axios\"\nimport CartCard from '../CartCard/CartCard';\nimport NavBar from '../NavBar/NavBar';\nimport { useNavigate } from \"react-router-dom\";\n\nexport default function Cart() {\n    const { appState, setAppState, vendorState, setvendorState } = useAppStateContext()\n    const [isCartFilled, setCart] = useState(false)\n    const navigate = useNavigate()\n    // if (appState.cart.length !==0){\n    //     setCart(true)\n    // }\n\n    const emptyCart = () => {\n        setAppState((a) => (\n            {\n                ...a,\n                cart: [],\n                review:[]\n            }\n        ))\n    }\n\n\n    // useEffect (() =>{\n    //     const updateCart = () =>{\n    //         let newCart = []\n    //         console.log(appState.review)\n    //         for (let i = 0; i < appState.review.length; i++) {\n    //             for (let i = 0; i < appState.review[i].quantity; i++){\n    //                 newCart.push(appState.review[i].name)\n    //             }\n                \n    //         }\n    //         console.log(newCart)\n    //         return newCart\n    //     }\n    \n    //     const newCart = updateCart()\n\n    //     setAppState((a) => ({\n    //         ...a,\n    //         cart:newCart\n    //     }))\n\n    // },[appState.review.length])\n\n    const formatCart = () => {\n        const obj = {}\n        for (let i = 0; i < appState.cart.length; i++) {\n            if (appState.cart[i] in obj) {\n                obj[appState.cart[i]] += 1\n            } else {\n                obj[appState.cart[i]] = 1\n            }\n        }\n\n        return obj\n    }\n\n    // console.log(prices)\n    const obj = formatCart()\n    const items = []\n    for (const [key, value] of Object.entries(obj)) {\n        items.push({ name: key, quantity: value });\n    }\n\n    const cart = []\n    for (const [key, value] of Object.entries(obj)) {\n        let obj = {}\n        obj[key] = value\n        cart.push(obj);\n    }\n\n\n    const createOrder = async () => {\n        // console.log(cart)\n        const { data, error } = await apiClient.createOrder(\n            {\n                \"cart\": {\n                    address: \"123 Street\",\n                    products: cart\n                }\n            }\n        )\n        console.log(vendorState.currentOrders)\n        setvendorState(oldState => ({ currentOrders: [...oldState.currentOrders, data] }))\n        emptyCart()\n        // if (error){\n        //   setErrors((e) => ({ ...e, form:error}))\n        // }\n    }\n    // console.log(items)\n    // console.log(appState.cart1)\n    return (\n        <Container>\n            <NavBar></NavBar>\n            <Grid>\n            <Typography>Your Cart</Typography>\n            <Button onClick={()=>{navigate('/menu')}}>Add more items</Button>\n            </Grid>\n            <Grid container>\n                {items.length === 0 ? \"Cart is empty\" : items.map((item, idx) => (\n                    <CartCard product={item} key={idx}></CartCard>\n                ))}\n            </Grid>\n            <Button onClick={createOrder}>Place Order</Button>\n            <Button onClick={emptyCart}>Clear Cart</Button>\n            <Button onClick={()=>{navigate('/checkout')}}>Checkout Order</Button>\n        </Container>\n\n\n    )\n}"]},"metadata":{},"sourceType":"module"}