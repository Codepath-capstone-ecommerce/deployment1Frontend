{"ast":null,"code":"var _jsxFileName = \"/Users/kordellschrock/Documents/Github/ecommerce/frontend/src/components/Cart/Cart.js\",\n    _s = $RefreshSig$();\n\nimport { useAppStateContext } from '../../contexts/appStateContext';\nimport { Container, Button, Typography, Card, CardContent, CardMedia, Grid, Box } from '@material-ui/core';\nimport apiClient from '../../services/apiClient';\nimport { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport CartCard from '../CartCard/CartCard';\nimport NavBar from '../NavBar/NavBar';\nimport { useNavigate } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Cart() {\n  _s();\n\n  const {\n    appState,\n    setAppState,\n    vendorState,\n    setvendorState\n  } = useAppStateContext();\n  const [isCartFilled, setCart] = useState(false);\n  const navigate = useNavigate(); // if (appState.cart.length !==0){\n  //     setCart(true)\n  // }\n\n  const emptyCart = () => {\n    setAppState(a => ({ ...a,\n      cart: [],\n      review: []\n    }));\n  };\n\n  const formatCart = () => {\n    const obj = {};\n\n    for (let i = 0; i < appState.cart.length; i++) {\n      if (appState.cart[i] in obj) {\n        obj[appState.cart[i]] += 1;\n      } else {\n        obj[appState.cart[i]] = 1;\n      }\n    }\n\n    return obj;\n  }; // console.log(prices)\n\n\n  const obj = formatCart();\n  const items = [];\n\n  for (const [key, value] of Object.entries(obj)) {\n    items.push({\n      name: key,\n      quantity: value\n    });\n  }\n\n  const cart = [];\n\n  for (const [key, value] of Object.entries(obj)) {\n    let obj = {};\n    obj[key] = value;\n    cart.push(obj);\n  }\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(NavBar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        children: \"My Cart\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: () => {\n          navigate('/menu');\n        },\n        children: \"Add more items\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        spacing: 3,\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 4,\n          children: \"Item\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 4,\n          children: \"Price\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 4,\n          children: \"Quantity\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      children: items.length === 0 ? \"Cart is empty\" : items.map((item, idx) => /*#__PURE__*/_jsxDEV(CartCard, {\n        product: item\n      }, idx, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      onClick: emptyCart,\n      children: \"Clear Cart\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      onClick: () => {\n        navigate('/checkout');\n      },\n      children: \"Checkout Order\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Cart, \"As690ri9rV3n+NvRABz5dlZe5j0=\", false, function () {\n  return [useAppStateContext, useNavigate];\n});\n\n_c = Cart;\n\nvar _c;\n\n$RefreshReg$(_c, \"Cart\");","map":{"version":3,"sources":["/Users/kordellschrock/Documents/Github/ecommerce/frontend/src/components/Cart/Cart.js"],"names":["useAppStateContext","Container","Button","Typography","Card","CardContent","CardMedia","Grid","Box","apiClient","useState","useEffect","axios","CartCard","NavBar","useNavigate","Cart","appState","setAppState","vendorState","setvendorState","isCartFilled","setCart","navigate","emptyCart","a","cart","review","formatCart","obj","i","length","items","key","value","Object","entries","push","name","quantity","map","item","idx"],"mappings":"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","sourcesContent":["import { useAppStateContext } from '../../contexts/appStateContext';\nimport { Container, Button, Typography, Card, CardContent, CardMedia, Grid, Box } from '@material-ui/core';\nimport apiClient from '../../services/apiClient';\nimport { useState, useEffect } from \"react\"\nimport axios from \"axios\"\nimport CartCard from '../CartCard/CartCard';\nimport NavBar from '../NavBar/NavBar';\nimport { useNavigate } from \"react-router-dom\";\n\nexport default function Cart() {\n    const { appState, setAppState, vendorState, setvendorState } = useAppStateContext()\n    const [isCartFilled, setCart] = useState(false)\n    const navigate = useNavigate()\n    // if (appState.cart.length !==0){\n    //     setCart(true)\n    // }\n\n    const emptyCart = () => {\n        setAppState((a) => (\n            {\n                ...a,\n                cart: [],\n                review: []\n            }\n        ))\n    }\n\n    const formatCart = () => {\n        const obj = {}\n        for (let i = 0; i < appState.cart.length; i++) {\n            if (appState.cart[i] in obj) {\n                obj[appState.cart[i]] += 1\n            } else {\n                obj[appState.cart[i]] = 1\n            }\n        }\n\n        return obj\n    }\n\n    // console.log(prices)\n    const obj = formatCart()\n    const items = []\n    for (const [key, value] of Object.entries(obj)) {\n        items.push({ name: key, quantity: value });\n    }\n\n    const cart = []\n    for (const [key, value] of Object.entries(obj)) {\n        let obj = {}\n        obj[key] = value\n        cart.push(obj);\n    }\n\n    return (\n        <Container>\n            <NavBar></NavBar>\n            <Grid>\n                <Typography>My Cart</Typography>\n                <Button onClick={() => { navigate('/menu') }}>Add more items</Button>\n                <Grid container spacing={3}>\n                    <Grid item xs={4}>\n                        Item\n                    </Grid>\n                    <Grid item xs={4}>\n                        Price\n                    </Grid>\n                    <Grid item xs={4}>\n                        Quantity\n                    </Grid>\n                </Grid>\n            </Grid>\n            <Grid >\n                {items.length === 0 ? \"Cart is empty\" : items.map((item, idx) => (\n                    <CartCard product={item} key={idx}></CartCard>\n                ))}\n            </Grid>\n            <Button onClick={emptyCart}>Clear Cart</Button>\n            <Button onClick={() => { navigate('/checkout') }}>Checkout Order</Button>\n        </Container>\n\n\n    )\n}"]},"metadata":{},"sourceType":"module"}