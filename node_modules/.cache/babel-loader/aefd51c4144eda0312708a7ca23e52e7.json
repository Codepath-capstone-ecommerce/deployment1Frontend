{"ast":null,"code":"var _jsxFileName = \"/Users/kordellschrock/Documents/Github/ecommerce/frontend/src/components/LineGraph/LineGraph.js\",\n    _s = $RefreshSig$();\n\nimport { Line } from 'react-chartjs-2';\nimport apiClient from '../../services/apiClient';\nimport { useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function LineGraph({\n  range,\n  dateRange,\n  start\n}) {\n  _s();\n\n  const [data, setData] = useState([]);\n  const days = {\n    1: 'Mon',\n    2: 'Tues',\n    3: 'Wed',\n    4: 'Thurs',\n    5: 'Fri',\n    6: 'Sat',\n    7: 'Sun'\n  };\n  const months = {\n    \"Jan\": '01',\n    \"Feb\": '02',\n    \"Mar\": '03',\n    \"Apr\": '04',\n    \"May\": '05',\n    \"Jun\": '06',\n    \"Jul\": '07',\n    \"Aug\": '08',\n    \"Sep\": '09',\n    \"Oct\": '10',\n    \"Nov\": '11',\n    \"Dec\": '12'\n  };\n  useEffect(() => {\n    Date.prototype.addDays = function (days) {\n      var date = new Date(this.valueOf());\n      date.setDate(date.getDate() + days);\n      return date;\n    };\n\n    function getDates(startDate, stopDate) {\n      var dateArray = [];\n      var currentDate = startDate;\n\n      while (currentDate <= stopDate) {\n        let date = new Date(currentDate);\n        date = date.toString();\n        let dateFormat = date.slice(11, 15) + '-' + months[date.slice(4, 7)] + '-' + date.slice(8, 10);\n        dateArray.push(dateFormat);\n        currentDate = currentDate.addDays(1);\n      }\n\n      return dateArray;\n    }\n\n    const dateArray = getDates(dateRange[0].startDate, dateRange[0].endDate);\n\n    const handleOnSubmit = async startDate => {\n      const {\n        data,\n        error\n      } = await apiClient.getWeeklyOrders({\n        start_date: startDate\n      });\n      return data;\n    };\n\n    const forLoop = async () => {\n      setData(await Promise.all(dateArray.map(date => handleOnSubmit(date))));\n    };\n\n    forLoop();\n  }, [dateRange]);\n  let more = [];\n\n  for (let i = 0; i < data.length; i++) {\n    more.push(data[i]['orders']);\n  }\n\n  console.log(start);\n  let labels = [];\n\n  if (range > 7) {\n    start = start.getUTCDate();\n\n    for (let i = 0; i < range; i++) {\n      labels.push(start);\n      start += 1;\n    }\n  } else {\n    start = start.getUTCDay();\n\n    for (let i = 0; i < range; i++) {\n      labels.push(days[start]);\n      start += 1;\n\n      if (start > 7) {\n        start = 1;\n      }\n    }\n  }\n\n  console.log(labels);\n  const state = {\n    labels: labels,\n    datasets: [{\n      label: 'Sales',\n      backgroundColor: 'rgba(75,192,192,1)',\n      lineTension: 0.5,\n      borderColor: 'rgba(0,0,0,1)',\n      borderWidth: 2,\n      data: more\n    }]\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Line, {\n      data: state,\n      options: {\n        title: {\n          display: true,\n          text: 'Daily Sales',\n          fontSize: 20\n        },\n        legend: {\n          display: true,\n          position: 'right'\n        }\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 111,\n    columnNumber: 5\n  }, this);\n}\n\n_s(LineGraph, \"IEMTtLVFIuToo7X/raQbJAxzNQU=\");\n\n_c = LineGraph;\n\nvar _c;\n\n$RefreshReg$(_c, \"LineGraph\");","map":{"version":3,"sources":["/Users/kordellschrock/Documents/Github/ecommerce/frontend/src/components/LineGraph/LineGraph.js"],"names":["Line","apiClient","useEffect","useState","LineGraph","range","dateRange","start","data","setData","days","months","Date","prototype","addDays","date","valueOf","setDate","getDate","getDates","startDate","stopDate","dateArray","currentDate","toString","dateFormat","slice","push","endDate","handleOnSubmit","error","getWeeklyOrders","start_date","forLoop","Promise","all","map","more","i","length","console","log","labels","getUTCDate","getUTCDay","state","datasets","label","backgroundColor","lineTension","borderColor","borderWidth","title","display","text","fontSize","legend","position"],"mappings":"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","sourcesContent":["import { Line } from 'react-chartjs-2';\nimport apiClient from '../../services/apiClient';\nimport { useEffect, useState } from \"react\";\n\nexport default function LineGraph({ range, dateRange, start }) {\n  const [data, setData] = useState([])\n  const days = {\n    1: 'Mon',\n    2: 'Tues',\n    3: 'Wed',\n    4: 'Thurs',\n    5: 'Fri',\n    6: 'Sat',\n    7: 'Sun'\n  }\n\n  const months = {\n    \"Jan\": '01',\n    \"Feb\": '02',\n    \"Mar\": '03',\n    \"Apr\": '04',\n    \"May\": '05',\n    \"Jun\": '06',\n    \"Jul\": '07',\n    \"Aug\": '08',\n    \"Sep\": '09',\n    \"Oct\": '10',\n    \"Nov\": '11',\n    \"Dec\": '12'\n  }\n\n\n  useEffect(() => {\n    Date.prototype.addDays = function (days) {\n      var date = new Date(this.valueOf());\n      date.setDate(date.getDate() + days);\n      return date;\n    }\n\n    function getDates(startDate, stopDate) {\n      var dateArray = [];\n      var currentDate = startDate;\n      while (currentDate <= stopDate) {\n        let date = new Date(currentDate)\n        date = date.toString()\n        let dateFormat = date.slice(11, 15) + '-' + months[date.slice(4, 7)] + '-' + date.slice(8, 10)\n        dateArray.push(dateFormat);\n        currentDate = currentDate.addDays(1);\n      }\n      return dateArray;\n    }\n\n    const dateArray = getDates(dateRange[0].startDate, dateRange[0].endDate)\n\n    const handleOnSubmit = async (startDate) => {\n\n      const { data, error } = await apiClient.getWeeklyOrders(\n        {\n          start_date: startDate\n        })\n      return data\n    }\n    const forLoop = async () => {\n      setData(await Promise.all(dateArray.map((date) => handleOnSubmit(date))))\n    }\n    forLoop()\n\n  }, [dateRange])\n\n  let more = []\n  for (let i =0; i<data.length;i++){\n    more.push(data[i]['orders'])\n  }\n\n  console.log(start)\n  let labels =[]\n  if (range>7){\n    start = start.getUTCDate()\n    for(let i =0;i<range;i++){\n      labels.push(start)\n      start+=1\n    }\n  }else{\n    start = start.getUTCDay()\n    for(let i =0;i<range;i++){\n      labels.push(days[start])\n      start+=1\n      if (start>7){\n        start =1\n      }\n    }\n  }\n\n  console.log(labels)\n\n\n  const state = {\n    labels: (labels),\n    datasets: [\n      {\n        label: 'Sales',\n        backgroundColor: 'rgba(75,192,192,1)',\n        lineTension: 0.5,\n        borderColor: 'rgba(0,0,0,1)',\n        borderWidth: 2,\n        data: more\n      }\n    ]\n  }\n  return (\n    <div>\n      <Line\n        data={state}\n        options={{\n          title: {\n            display: true,\n            text: 'Daily Sales',\n            fontSize: 20\n          },\n          legend: {\n            display: true,\n            position: 'right'\n          }\n        }}\n      />\n    </div>\n  );\n}"]},"metadata":{},"sourceType":"module"}