{"ast":null,"code":"var _jsxFileName = \"/Users/kordellschrock/Documents/Github/ecommerce/frontend/src/components/PaymentForm/PaymentForm.js\";\nimport { Typograph, Button, Divider, Typography } from '@material-ui/core';\nimport { Elements, CardElement, ElementsConsumer } from \"@stripe/react-stripe-js\";\nimport { loadStripe } from '@stripe/stripe-js';\nimport Review from '../Review/Review'; //grab stripe promise with public key  (put into env file later)\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst stripePromise = loadStripe('pk_test_51JHVxDAT6YdOUgSd9z0elQAkI6zeC8p4dd8YBYk2nTyIiGumxkBUqPXnyQPdNGKhfVAwTCmgoWUVl57H5EBrIOsL00J3lY34QJ');\nexport default function PaymentForm({\n  checkoutToken\n}) {\n  const handleSubmit = async (event, elements, stripe) => {\n    event.preventDefault();\n    if (!stripe || !elements) return;\n    const cardElement = elements.getElement(CardElement);\n    const {\n      error,\n      paymentMethod\n    } = await stripe.createPaymentMethod({\n      type: 'card',\n      card: cardElement\n    });\n\n    if (error) {\n      console.log(error);\n    } else {\n      alert(\"success\");\n      const orderData = {\n        line_items: [],\n        customer: \"\",\n        shipping: {\n          name: \"Primary\",\n          street: '',\n          postal_zip_code: \"\"\n        }\n      };\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Review, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h6\",\n      children: \"Payment method\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Elements, {\n      stripe: stripePromise,\n      children: /*#__PURE__*/_jsxDEV(ElementsConsumer, {\n        children: ({\n          elements,\n          stripe\n        }) => /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: e => handleSubmit(e, elements, stripe),\n          children: [/*#__PURE__*/_jsxDEV(CardElement, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 41,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 42,\n            columnNumber: 25\n          }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 42,\n            columnNumber: 31\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n}\n_c = PaymentForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"PaymentForm\");","map":{"version":3,"sources":["/Users/kordellschrock/Documents/Github/ecommerce/frontend/src/components/PaymentForm/PaymentForm.js"],"names":["Typograph","Button","Divider","Typography","Elements","CardElement","ElementsConsumer","loadStripe","Review","stripePromise","PaymentForm","checkoutToken","handleSubmit","event","elements","stripe","preventDefault","cardElement","getElement","error","paymentMethod","createPaymentMethod","type","card","console","log","alert","orderData","line_items","customer","shipping","name","street","postal_zip_code","e"],"mappings":";AAAA,SAAQA,SAAR,EAAmBC,MAAnB,EAA2BC,OAA3B,EAAoCC,UAApC,QAAqD,mBAArD;AACA,SAASC,QAAT,EAAmBC,WAAnB,EAAgCC,gBAAhC,QAAwD,yBAAxD;AACA,SAASC,UAAT,QAA0B,mBAA1B;AACA,OAAOC,MAAP,MAAmB,kBAAnB,C,CAEA;;;;AACA,MAAMC,aAAa,GAAGF,UAAU,CAAC,6GAAD,CAAhC;AACA,eAAe,SAASG,WAAT,CAAqB;AAAEC,EAAAA;AAAF,CAArB,EAAwC;AACnD,QAAMC,YAAY,GAAG,OAAOC,KAAP,EAAaC,QAAb,EAAsBC,MAAtB,KAAiC;AAClDF,IAAAA,KAAK,CAACG,cAAN;AAEA,QAAG,CAACD,MAAD,IAAW,CAACD,QAAf,EAAyB;AAEzB,UAAMG,WAAW,GAAGH,QAAQ,CAACI,UAAT,CAAoBb,WAApB,CAApB;AAEA,UAAM;AAAEc,MAAAA,KAAF;AAASC,MAAAA;AAAT,QAA2B,MAAML,MAAM,CAACM,mBAAP,CAA2B;AAAEC,MAAAA,IAAI,EAAC,MAAP;AAAeC,MAAAA,IAAI,EAACN;AAApB,KAA3B,CAAvC;;AAEA,QAAGE,KAAH,EAAS;AACLK,MAAAA,OAAO,CAACC,GAAR,CAAYN,KAAZ;AACH,KAFD,MAEK;AACDO,MAAAA,KAAK,CAAC,SAAD,CAAL;AACA,YAAMC,SAAS,GAAG;AACdC,QAAAA,UAAU,EAAE,EADE;AAEdC,QAAAA,QAAQ,EAAC,EAFK;AAGdC,QAAAA,QAAQ,EAAC;AACLC,UAAAA,IAAI,EAAC,SADA;AAELC,UAAAA,MAAM,EAAC,EAFF;AAGLC,UAAAA,eAAe,EAAC;AAHX;AAHK,OAAlB;AASH;AACJ,GAvBD;;AAwBA,sBACI;AAAA,4BACA,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,YADA,eAEA,QAAC,UAAD;AAAY,MAAA,OAAO,EAAC,IAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFA,eAGA,QAAC,QAAD;AAAU,MAAA,MAAM,EAAExB,aAAlB;AAAA,6BACI,QAAC,gBAAD;AAAA,kBACK,CAAC;AAAEK,UAAAA,QAAF;AAAYC,UAAAA;AAAZ,SAAD,kBACG;AAAM,UAAA,QAAQ,EAAGmB,CAAD,IAAOtB,YAAY,CAACsB,CAAD,EAAGpB,QAAH,EAAYC,MAAZ,CAAnC;AAAA,kCACI,QAAC,WAAD;AAAA;AAAA;AAAA;AAAA,kBADJ,eAEI;AAAA;AAAA;AAAA;AAAA,kBAFJ,oBAEU;AAAA;AAAA;AAAA;AAAA,kBAFV;AAAA;AAAA;AAAA;AAAA;AAAA;AAFR;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YAHA;AAAA,kBADJ;AAwBH;KAjDuBL,W","sourcesContent":["import {Typograph, Button, Divider, Typography} from '@material-ui/core'\nimport { Elements, CardElement, ElementsConsumer } from \"@stripe/react-stripe-js\"\nimport { loadStripe} from '@stripe/stripe-js'\nimport Review from '../Review/Review'\n\n//grab stripe promise with public key  (put into env file later)\nconst stripePromise = loadStripe('pk_test_51JHVxDAT6YdOUgSd9z0elQAkI6zeC8p4dd8YBYk2nTyIiGumxkBUqPXnyQPdNGKhfVAwTCmgoWUVl57H5EBrIOsL00J3lY34QJ')\nexport default function PaymentForm({ checkoutToken }) {\n    const handleSubmit = async (event,elements,stripe) => {\n        event.preventDefault();\n\n        if(!stripe || !elements) return ;\n\n        const cardElement = elements.getElement(CardElement)\n\n        const { error, paymentMethod } = await stripe.createPaymentMethod({ type:'card', card:cardElement})\n\n        if(error){\n            console.log(error)\n        }else{\n            alert(\"success\")\n            const orderData = {\n                line_items: [],\n                customer:\"\",\n                shipping:{\n                    name:\"Primary\",\n                    street:'',\n                    postal_zip_code:\"\"\n                }\n            }\n        }\n    }\n    return (\n        <>\n        <Review></Review>\n        <Typography variant=\"h6\">Payment method</Typography>\n        <Elements stripe={stripePromise}>\n            <ElementsConsumer>\n                {({ elements, stripe }) => (\n                    <form onSubmit={(e) => handleSubmit(e,elements,stripe)}>\n                        <CardElement/>\n                        <br/> <br/>\n                        {/* <div style={{display:'flex', justifyContent: 'space-between'}}>\n                            <Button>Back</Button>\n                            <Button type=\"submit\" variant=\"contained\" disabled={!stripe} color=\"primary\">\n                                Pay\n                            </Button>\n\n                        </div> */}\n                        \n                    </form>\n                )}\n            </ElementsConsumer>\n        </Elements>\n        </>\n    )\n}"]},"metadata":{},"sourceType":"module"}